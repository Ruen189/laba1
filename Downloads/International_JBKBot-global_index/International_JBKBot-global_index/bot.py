import telebot
from dotenv import load_dotenv
from ai_operator import get_answer
import os
import sys
import time
import logging
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import datetime
from telebot.types import BotCommand
from flask import Flask, request

logging.basicConfig(filename='log.txt', level=logging.INFO)

logging.basicConfig(
    filename='log.txt',
    level=logging.INFO,
    format='%(asctime)s - %(message)s',
    encoding='utf-8'
)

load_dotenv()
# 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(os.getenv("TOKEN"))

# 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(commands=['start'])
def handle_start(message):
    user_id = message.from_user.id
    # –û—Ç–¥–µ–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è –∞–¥–º–∏–Ω–∞
    if str(user_id) == os.getenv("ADMIN_ID"):
        bot.set_my_commands([
            BotCommand("start", "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É"),
            BotCommand("admin", "–û—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"),
        ], scope=telebot.types.BotCommandScopeChat(chat_id=user_id))
    else:
        bot.set_my_commands([
            BotCommand("start", "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É"),
        ], scope=telebot.types.BotCommandScopeChat(chat_id=user_id))
    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é –∫–Ω–æ–ø–æ–∫
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("üõ† –ü–æ–º–æ—â—å", callback_data="help"))
    markup.add(InlineKeyboardButton("‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="faq"))
    markup.add(InlineKeyboardButton("üöÄ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", callback_data="feedback"))
    markup.add(InlineKeyboardButton("üî• –û—Ü–µ–Ω–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞", callback_data="rating"))
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    bot.send_message(message.chat.id, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –∫–∞–∫–æ–π —É –≤–∞—Å –≤–æ–ø—Ä–æ—Å?", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: True)
def handle_all_callbacks(call):
    if str(call.from_user.id) == os.getenv("ADMIN_ID"):
        admin_logs = ['log','clear_log','off','confirm_off','cancel_off','add_faq','delete_faq']
        if str(call.data) in admin_logs:
            handle_admin_callbacks(call)  # –í—ã–∑—ã–≤–∞–µ–º –≤–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∞–¥–º–∏–Ω–∞
            return

    if call.data == "help":
        bot.send_message(call.message.chat.id,
                         "–≠—Ç–æ—Ç –±–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ø–æ—Å–µ–ª–µ–Ω–∏—é "
                         "–∏–ª–∏ —Å–≤—è–∑—ã–≤–∞–µ—Ç —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º, –µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å —Ç—Ä–µ–±—É–µ—Ç —Ç–∞–∫–æ–≥–æ.\n"
                         "–ù–µ –Ω—É–∂–Ω–æ –æ–ø–∏—Å—ã–≤–∞—Ç—å –≤–∞—à–µ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏–ª–∏ —Å–∏—Ç—É–∞—Ü–∏—é - –∑–∞–¥–∞–≤–∞–π—Ç–µ —Å—Ä–∞–∑—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å.\n"
                         "–ü—Ä–∏–º–µ—Ä:\n"
                         "‚ùå–£ –º–µ–Ω—è –µ—Å—Ç—å –¥–æ–ª–≥ –ø–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—é, –∫–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç—å –¥–æ–ª–≥?\n"
                         "‚úÖ–ö–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç—å –ø—Ä–æ–∂–∏–≤–∞–Ω–∏–µ?")

    elif call.data == "faq":
        bot.send_message(call.message.chat.id,
        '"–ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–µ—Ä–µ—Å–µ–ª–µ–Ω–∏–µ?":\n'
        '–î–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞—è–≤–ª–µ–Ω–∏—è –Ω–µ –ø–µ—Ä–µ—Å–µ–ª–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–æ–π—Ç–∏ –≤ –∂–∏–ª–∏—â–Ω–æ-–±—ã—Ç–æ–≤—É—é –∫–æ–º–∏—Å—Å–∏—é –≤–æ –≤—Ä–µ–º—è –¥–µ–∂—É—Ä—Å—Ç–≤–∞\n'
        '"–ö–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç—å –ø—Ä–æ–∂–∏–≤–∞–Ω–∏–µ?":\n'
        '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–π—Ç–∏ –≤ –õ–ö —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ —Ä–∞–∑–¥–µ–ª \"–ü–ª–∞—Ç–µ–∂–∏ –∏ –∑–∞–¥–æ–ª–∂–Ω–æ—Å—Ç–∏\" –∏ –æ–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å pay.urfu.ru\n'
        '"–ú–æ–∂–Ω–æ –ª–∏ –≤—ã–±—Ä–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É?":\n'
        '–í—ã–±–æ—Ä –∫–æ–º–Ω–∞—Ç—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω, —É—Ç–æ—á–Ω–∏—Ç–µ –≤ –¥–µ–∫–∞–Ω–∞—Ç–µ –∏–ª–∏ —Å—Ç—É–¥–≥–æ—Ä–æ–¥–∫–µ.\n')

    elif call.data == "feedback":
        msg = bot.send_message(call.message.chat.id, "‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –±–æ—Ç–∞:")
        bot.register_next_step_handler(msg, save_feedback)

    elif call.data == "rating":
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("‚≠ê", callback_data="rate_1")),
        markup.add(InlineKeyboardButton("‚≠ê‚≠ê", callback_data="rate_2")),
        markup.add(InlineKeyboardButton("‚≠ê‚≠ê‚≠ê", callback_data="rate_3")),
        markup.add(InlineKeyboardButton("‚≠ê‚≠ê‚≠ê‚≠ê", callback_data="rate_4")),
        markup.add(InlineKeyboardButton("‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê", callback_data="rate_5")),
        bot.send_message(call.message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞:", reply_markup=markup)

    elif call.data.startswith("rate_"):
        rating_value = call.data.split("_")[1]  # –ü–æ–ª—É—á–∞–µ–º —á–∏—Å–ª–æ –∏–∑ callback_data
        user = call.from_user
        with open('log.txt', 'a', encoding='utf-8') as f:
            f.write(
                f"Rating | Time: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')} | User: @{user.username} | ID: {user.id} | Rating: {rating_value}\n"
            )
        bot.send_message(call.message.chat.id, f"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É: {rating_value} ‚≠ê!")

def save_feedback(message):
    user = message.from_user
    feedback_text = message.text
    with open('log.txt', 'a', encoding='utf-8') as f:
        f.write(
            f"Feedback | Time: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')} | User: @{user.username} | ID: {user.id} | Feedback: {feedback_text}\n"
        )
    bot.send_message(message.chat.id, "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!")

@bot.callback_query_handler(func=lambda call: str(call.from_user.id) == os.getenv("ADMIN_ID"))
def handle_admin_callbacks(call):
    if call.data == "log":
        with open("log.txt", "rb") as f:
            bot.send_document(call.message.chat.id, f)
    elif call.data == "clear_log":
        try:
            admin = call.from_user
            with open("log.txt", "w", encoding="utf-8") as f:
                f.write(
                    f"[{datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] –õ–æ–≥–∏ –±—ã–ª–∏ –æ—á–∏—â–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: @{admin.username} (ID: {admin.id})\n")

            bot.send_message(call.message.chat.id, "üßπ –õ–æ–≥–∏ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã.")
        except Exception as e:
            bot.send_message(call.message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ª–æ–≥–æ–≤: {e}")
    elif call.data == "off":
        confirm_markup = InlineKeyboardMarkup()
        confirm_markup.add(
            InlineKeyboardButton("‚úÖ –î–∞", callback_data="confirm_off"),
            InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="cancel_off")
        )
        bot.send_message(call.message.chat.id, "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞?",
                         reply_markup=confirm_markup)
    elif call.data == "confirm_off":
        username = call.from_user.username or "unknown"
        admin_id = call.from_user.id

        try:
            with open("log.txt", "a", encoding="utf-8") as f:
                f.write(
                    f"{datetime.datetime.now()} - Bot was turned off by @{username} (ID: {admin_id})\n")

            bot.send_message(call.message.chat.id, "üîÑ –í—ã–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞...")
            time.sleep(1)
            python = sys.executable
            os.execl(python, python, *sys.argv)

        except Exception as e:
            bot.send_message(call.message.chat.id, f"Error off: {e}")

    elif call.data == "cancel_off":
        bot.send_message(call.message.chat.id, "‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    elif call.data == "add_faq":
        msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å:")
        bot.register_next_step_handler(msg, process_new_question)

    # –£–¥–∞–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞
    elif call.data == "delete_faq":
        msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:")
        bot.register_next_step_handler(msg, delete_faq)

#–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ faq_data
def process_new_question(message):
    new_question = message.text
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å:")
    bot.register_next_step_handler(msg, lambda m: save_new_faq(new_question, m))

def save_new_faq(question, message):
    from ai_operator import faq_data, save_faq_data, questions, answers, build_faiss_index

    answer = message.text
    faq_data[question] = answer
    save_faq_data(faq_data)

    questions.clear()
    questions.extend(faq_data.keys())
    answers.clear()
    answers.extend(faq_data.values())

    build_faiss_index()

    bot.send_message(message.chat.id, f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å:\n\n{question}\n–û—Ç–≤–µ—Ç:\n{answer}")


def delete_faq(message):
    from ai_operator import faq_data, save_faq_data, questions, answers, build_faiss_index

    question = message.text
    if question in faq_data:
        del faq_data[question]
        save_faq_data(faq_data)

        questions.clear()
        questions.extend(faq_data.keys())
        answers.clear()
        answers.extend(faq_data.values())

        build_faiss_index()

        bot.send_message(message.chat.id, f"‚úÖ –í–æ–ø—Ä–æ—Å —É–¥–∞–ª—ë–Ω:\n{question}")
    else:
        bot.send_message(message.chat.id, "‚ùå –¢–∞–∫–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ.")


#–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
@bot.message_handler(commands=['admin'])
def admin_panel(message):
    if str(message.from_user.id) != os.getenv("ADMIN_ID"):
        bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å –ª–æ–≥", callback_data="log"))
    markup.add(InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥", callback_data="clear_log"))
    markup.add(InlineKeyboardButton("‚ùå –í—ã–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞", callback_data="off"))
    markup.add(InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="add_faq"))
    markup.add(InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="delete_faq"))
    bot.send_message(message.chat.id, "üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=markup)

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    user_input = message.text
    response, score, isFound = get_answer(user_input)
    if isFound:
        bot.send_message(message.chat.id, response)
    else:
        bot.send_message(message.chat.id, response + os.getenv("OPERATOR"))
        user = message.from_user

        with open('log.txt', 'a', encoding='utf-8') as f:
            f.write(
            f"Time: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')} | User: @{user.username} | ID: {user.id} | "
            f"Message: {user_input} | score: {score}\n")

# 3. –ó–∞–ø—É—Å–∫
app = Flask(__name__)

@app.route(f'/{os.getenv("TOKEN")}', methods=['POST'])
def webhook():
    update = telebot.types.Update.de_json(request.get_data(as_text=True))
    bot.process_new_updates([update])
    return 'OK', 200

if __name__ == "__main__":
    bot.remove_webhook()
    bot.set_webhook(url=f'{os.getenv("WEBHOOK_URL")}/{os.getenv("TOKEN")}')
    app.run(host="0.0.0.0", port=int(os.getenv("PORT", 5000)))